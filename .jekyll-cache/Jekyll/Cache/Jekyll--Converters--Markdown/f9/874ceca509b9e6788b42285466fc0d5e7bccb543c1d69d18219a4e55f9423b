I"<!--more-->

<h2 id="불변-객체-immutable">[불변 객체 (Immutable)]</h2>

<p>불변 객체란 <strong>한 번 객체가 생성되면 변하지 않는 객체</strong>를 의미합니다. Java의 대표적인 불변 객체는 <strong>String</strong> 클래스, <strong>Integer, Long</strong>과 같은 boxed primitive object 들이 있습니다.</p>

<p><br /></p>
<h3 id="string-클래스">String 클래스</h3>

<p>String 클래스를 한 번 봅시다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">String</span>
    <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span><span class="o">,</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;,</span> <span class="nc">CharSequence</span> <span class="o">{</span>
    <span class="cm">/** The value is used for character storage. */</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">char</span> <span class="n">value</span><span class="o">[];</span>
    
	<span class="cm">/* ... */</span>
    
    <span class="kd">public</span> <span class="nf">String</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="s">""</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
필드의 접근 제한자는 private이며, <strong>final</strong> 키워드를 통해 변수를 변경할 수 없도록 제한되어 있습니다. 이처럼 String 클래스는 Immutable하기 때문에 새로 수정할 때마다 기존 메모리를 버리고 새로운 메모리에 값을 넣어서 연결합니다. 따라서 <strong>메모리 누수가 발생할 수 있고, 새로운 객체를 계속 생성해야 하기 때문에 성능 저하가 발생</strong>할 수 있습니다.<br /><br /></p>

<h4 id="그럼-string-클래스는-왜-immutable-할까요-">그럼, <strong>String 클래스는 왜 Immutable 할까요 ?</strong></h4>

<p>String 변수의 reference를 여러 곳에서 갖고 있을 때, String이 mutable하다면 String 값 변경 시 이를 참조하는 모든 곳에서 변경된 object를 공유하게 됩니다. 이는 예상치 못한 문제를 만들어 낼 수 있으므로 Java의 String 클래스는 Immutable한 것입니다.</p>

<p><br /></p>

<h4 id="immutable한-객체를-사용함으로써-얻을-수-있는-이점">Immutable한 객체를 사용함으로써 얻을 수 있는 이점</h4>

<p>Java에서는 cloneable 인터페이스를 구현함으로써 deep copy를 하지 않는 이상 모든 값이 reference로 전달되므로 같은 객체를 가리키게 됩니다.<br />
가리키는 대상이 mutable하다면 필드를 변경하는 메소드를 호출했을 때 reference를 가지고 있는 모든 곳에서 내가 원하는 상태임을 보장할 수 없습니다. immutable한 객체를 사용하면 reference로 인한 다양한 side-effect를 미리 방지할 수 있습니다.</p>

<blockquote>
  <p>방어적 복사본을 만들 수고를 덜어주고, 다중 쓰레드 환경에서도 안전합니다.</p>
</blockquote>

<ul>
  <li>JDK 1.5 버전부터는 String + String 연산이 새로운 메모리에 저장되는 성능 이슈를 개선하기 위해 컴파일 단계에서 StringBuilder로 컴파일된다고 합니다.!</li>
</ul>

<p><br /></p>
<h2 id="가변-객체-mutable">[가변 객체 (Mutable)]</h2>

<p>가변객체는 <strong>객체가 생성된 후에도 필드 값이 변경될 수 있는 객체</strong>입니다. 필드 값을 바꿀 수 있는 메소드를 제공합니다. 가변 객체의 예로는 String 클래스와 반대로 <strong>StringBuilder</strong> 클래스가 있습니다.</p>

<p><strong>AbstractStringBuilder 클래스 (StringBuilder 클래스가 상속하는 추상 클래스)</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractStringBuilder</span> <span class="kd">implements</span> <span class="nc">Appendable</span><span class="o">,</span> <span class="nc">CharSequence</span> <span class="o">{</span>
    <span class="cm">/**
     * The value is used for character storage.
     */</span>
    <span class="kt">char</span><span class="o">[]</span> <span class="n">value</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>StrinBuilder 클래스에서 문자열을 저장하는 변수 value는 mutable하기 때문에 String 클래스와 달리 final 키워드가 없답니다 !</p>

<p><br />
<br />
<br /></p>

<h5 id="reference">Reference</h5>
<h5 id="java-immutable-class-불변-클래스"><a href="https://limkydev.tistory.com/68" target="_blank">[Java] Immutable Class (불변 클래스)</a></h5>
<h5 id="mutable-과-immutable"><a href="https://hun-developer.tistory.com/2?category=772082" target="_blank">mutable 과 immutable</a></h5>
:ET