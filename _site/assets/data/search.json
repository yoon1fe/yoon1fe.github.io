[
  
  {
    "title"    : "Java | Immutable &amp; Mutable",
    "category" : "",
    "tags"     : " Java",
    "url"      : "/2021/02/19/Immutable-&-Mutable.html",
    "date"     : "February 19, 2021",
    "excerpt"  : "\n\n[불변 객체 (Immutable)]\n\n불변 객체란 한 번 객체가 생성되면 변하지 않는 객체를 의미합니다. Java의 대표적인 불변 객체는 String 클래스, Integer, Long과 같은 Wrapper Class (Boxed primitive object) 들이 있습니다.\n\n\nString 클래스\n\nString 클래스를 한 번 봅시다.\n\npublic final class String\n    implements java.io.Seria...",
  "content"  : "\n\n[불변 객체 (Immutable)]\n\n불변 객체란 한 번 객체가 생성되면 변하지 않는 객체를 의미합니다. Java의 대표적인 불변 객체는 String 클래스, Integer, Long과 같은 Wrapper Class (Boxed primitive object) 들이 있습니다.\n\n\nString 클래스\n\nString 클래스를 한 번 봅시다.\n\npublic final class String\n    implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n    \n\t/* ... */\n    \n    public String() {\n        this.value = &quot;&quot;.value;\n    }\n}\n\n\n필드의 접근 제한자는 private이며, final 키워드를 통해 변수를 변경할 수 없도록 제한되어 있습니다. 이처럼 String 클래스는 Immutable하기 때문에 새로 수정할 때마다 기존 메모리를 버리고 새로운 메모리에 값을 넣어서 연결합니다. 따라서 메모리 누수가 발생할 수 있고, 새로운 객체를 계속 생성해야 하기 때문에 성능 저하가 발생할 수 있습니다.\n\n그럼, String 클래스는 왜 Immutable 할까요 ?\n\nString 변수의 reference를 여러 곳에서 갖고 있을 때, String이 mutable하다면 String 값 변경 시 이를 참조하는 모든 곳에서 변경된 object를 공유하게 됩니다. 이는 예상치 못한 문제를 만들어 낼 수 있으므로 Java의 String 클래스는 Immutable한 것입니다.\n\n\n\nImmutable한 객체를 사용함으로써 얻을 수 있는 이점\n\nJava에서는 cloneable 인터페이스를 구현함으로써 deep copy를 하지 않는 이상 모든 값이 reference로 전달되므로 같은 객체를 가리키게 됩니다.\n가리키는 대상이 mutable하다면 필드를 변경하는 메소드를 호출했을 때 reference를 가지고 있는 모든 곳에서 내가 원하는 상태임을 보장할 수 없습니다. immutable한 객체를 사용하면 reference로 인한 다양한 side-effect를 미리 방지할 수 있습니다. 또한, 멀티 쓰레드 환경에서도 따로 동기화 처리할 필요없이 객체를 공유해도 되겠죠.\n\n\n  방어적 복사본을 만들 수고를 덜어주고, 다중 쓰레드 환경에서도 안전합니다.\n\n\n\n  JDK 1.5 버전부터는 String + String 연산이 새로운 메모리에 저장되는 성능 이슈를 개선하기 위해 컴파일 단계에서 StringBuilder로 컴파일된다고 합니다.!\n\n\n\n[가변 객체 (Mutable)]\n\n가변객체는 객체가 생성된 후에도 필드 값이 변경될 수 있는 객체입니다. 필드 값을 바꿀 수 있는 메소드를 제공합니다. 가변 객체의 예로는 String 클래스와 반대로 StringBuilder 클래스가 있습니다.\n\nAbstractStringBuilder 클래스 (StringBuilder 클래스가 상속하는 추상 클래스)\n\nabstract class AbstractStringBuilder implements Appendable, CharSequence {\n    /**\n     * The value is used for character storage.\n     */\n    char[] value;\n}\n\n\nStrinBuilder 클래스에서 문자열을 저장하는 변수 value는 mutable하기 때문에 String 클래스와 달리 final 키워드가 없답니다 !\n\n\n\n\n\nReference\n[Java] Immutable Class (불변 클래스)\nmutable 과 immutable\n"
} ,
  
  {
    "title"    : "Base Camp 2주차 회고",
    "category" : "",
    "tags"     : " 회고",
    "url"      : "/2021/02/01/BaseCamp-2%EC%A3%BC%EC%B0%A8.html",
    "date"     : "February 1, 2021",
    "excerpt"  : "\n\n베이스 캠프 2주차이자 본격적인 기술 교육 첫 주가 끝이 났습니다.\n2주차에는 먼저 9주 동안 진행하게 될 프로젝트의 요구사항을 전달 받고 주로 기획하는데 많은 시간을 보내게 되었습니다. \n\n\n기획 …\n\n하게된 프로젝트는 예매 서비스입니다. 저희는 그 중에서도 영화 예매 서비스를 하기로 했습니다.\n인생 기획도 잘 못하는데 기획이라니,,, 눈 앞이 캄캄했지만 그냥 일단 마음가는대로 한 번 해보게 되었습니다..\n\n영화 예매 서비스에 꼭 있...",
  "content"  : "\n\n베이스 캠프 2주차이자 본격적인 기술 교육 첫 주가 끝이 났습니다.\n2주차에는 먼저 9주 동안 진행하게 될 프로젝트의 요구사항을 전달 받고 주로 기획하는데 많은 시간을 보내게 되었습니다. \n\n\n기획 …\n\n하게된 프로젝트는 예매 서비스입니다. 저희는 그 중에서도 영화 예매 서비스를 하기로 했습니다.\n인생 기획도 잘 못하는데 기획이라니,,, 눈 앞이 캄캄했지만 그냥 일단 마음가는대로 한 번 해보게 되었습니다..\n\n영화 예매 서비스에 꼭 있어야 할 핵심 기능부터 부수적인 기능들까지… \n사실 맨처음 기획에 일주일이란 시간이 주어졌을 때는 무슨 기획에 일주일이나 필요하나 했는디… 오오오산이었습니다 ^^;;\n생각하면 할수록 얘기해야할 부분이 생겨나는 신기한 경험을 할 수 있었습니다..\n\n수요일에는 우리 나름대로 구색을 맞추고 멘토님께 사전 리뷰를 받는 시간이 있었습니다.\n나름 머리를 열심히 짜내서 초안을 만들었었는데,, 정말 생각보다 훨씬 디테일하게 기획을 해야 했습니다…\n그렇게 다시 하나부터 열까지 처음부터 생각하면서 기획했습니다.\n\n\n일정 추정 …\n\n목요일 오전에는 기민한 소프트웨어 개발과 일정 추정에 대한 교육이 있었습니다. \n교육을 받으면서 플래닝 포커란 게임을 통해서 팀원들과 각 Feature 에 대해서 일정을 추정해보는 시간을 가졌습니다.\n실제 현업에서도 이렇게 할까요 ?? 생판 처음 보는 방법이었고, 사실 일정 추정에 대한 경험도 전무했던 터라 새롭고 재밌는 경험이었습니다 히히\n\n\n다음주 월요일 …\n\n발표는 다행히 혜진님이 굉장히 잘 해주셨고 !! 멘토님께서도 도움주신 부분에 + α 로 준비를 잘했다고 말씀해주셨슴다 ^___^\n그래도 발표가 끝나고 다시 기획서를 보니 허술한 부분 투성입니다…. 진짜 생각해야 할 게 끝이 없구만유!!\n\n화이팅 !!\n"
} ,
  
  {
    "title"    : "JavaScript | Hoisting",
    "category" : "",
    "tags"     : " js, JavaScript, hoisting",
    "url"      : "/2021/01/25/Hoisting.html",
    "date"     : "January 25, 2021",
    "excerpt"  : "\n\n자바 스크립트는 인터프리터에 의해 한 줄씩 순차적으로 실행됩니다.\n\n그럼 다음 코드의 실행 결과는 어떻게 될까요?\n\nconsole.log(score); // undefined\n\nvar score;  // 변수 선언문\n\n\nscore란 변수가 선언되기 전에 참조를 하려고 합니다. 하지만 참조 에러(ReferenceError)가 발생하지 않고 undefined가 출력됩니다. 그 이유는 바로 변수 선언이 런타임 시점 전 단계에서 먼저 실행되기...",
  "content"  : "\n\n자바 스크립트는 인터프리터에 의해 한 줄씩 순차적으로 실행됩니다.\n\n그럼 다음 코드의 실행 결과는 어떻게 될까요?\n\nconsole.log(score); // undefined\n\nvar score;  // 변수 선언문\n\n\nscore란 변수가 선언되기 전에 참조를 하려고 합니다. 하지만 참조 에러(ReferenceError)가 발생하지 않고 undefined가 출력됩니다. 그 이유는 바로 변수 선언이 런타임 시점 전 단계에서 먼저 실행되기 때문입니다.\n\n자바스크립트 엔진은 소스코드를 한 줄씩 순차적으로 실행하기에 앞서 평가 과정을 거치며 코드를 실행하기 위한 준비를 합니다. 즉, 자바스크립트 엔진은 소스코드를 두 개의 과정, 평가와 실행으로 나누어 처리합니다.\n\n이 때 소스코드 평가 과정에서 자바스크립트 엔진은 변수 선언을 포함한 모든 선언문(변수 선언문, 함수 선언문 등)을 소스코드에서 찾아서 먼저 실행합니다. 그리고 소스코드의 평가 과정이 끝나고 나면 선언문을 제외한 나머지 소스코드를 한 줄씩 순차적으로 실행하는 것입니다.\n\n이처럼 변수 선언문이 코드의 맨 위로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅(variable hoisting)이라고 합니다.\n\n\n\n\n출처: https://lk.co.kr/storage/lk/ko/catalogue/2018/01/12/gFcUcAi1KCJ7w4NCxdtVYi4j8IiIfQ0hsdds8vAA_sm.jpeg\n\n\n\n이게 호이스트랩니다. 무언가를 끌어 올리는 장치져. 그래서 자바스크립트에서의 호이스팅에 대해 많이들 오해하는 부분이 있습니다.\n많은 자료에서 호이스팅을 변수 및 함수 선언이 물리적으로 작성한 코드의 상단으로 옮겨지는 것으로 말하지만, 실제로는 그렇지 않다는 것입니다. 저 또한 실제 물리적으로도 올라가는줄 알았습니다.\n하지만 호이스팅은 변수 및 함수 선언은 컴파일 단계에서 메모리에 저장되지만, 코드에서 입력한 위치와 동일한 부분에 코드가 위치하게 됩니다.\n\n또한, 자바스크립트는 초기화가 아닌 선언만 끌어올립니다(hoist). 만약 변수를 선언한 뒤 나중에 초기화시켜 사용한다면, 그 값은 undefined로 지정됩니다. 이는 아래의 코드로 확인해 볼 수 있습니다.\n\nvar x = 1; // x 초기화\nconsole.log(x + &quot; &quot; + y); // &#39;1 undefined&#39;\nvar y = 2;\n\n\n// 아래 코드는 이전 코드와 같은 방식으로 동작합니다.\nvar x = 1; // Initialize x\nvar y; // Declare y\nconsole.log(x + &quot; &quot; + y); // &#39;1 undefined&#39;\ny = 2; // Initialize y\n\n\n\n\n\n\nReference\n모던 자바스크립트 Deep Dive:자바스크립트의 기본 개념과 동작 원리\nMozilla Hoisting\n"
} ,
  
  {
    "title"    : "기술 교육 1주차",
    "category" : "",
    "tags"     : " 회고, NHN",
    "url"      : "/2021/01/24/%EC%9E%85%EB%AC%B8%EA%B5%90%EC%9C%A1%ED%9A%8C%EA%B3%A0.html",
    "date"     : "January 24, 2021",
    "excerpt"  : "\n\n1월 4일 입사하고 벌써 2주가 훌쩍 지났습니다. \n지난 2주간은 입문 교육 후, 베이스 캠프라고 불리는 9 (+ 1) 주 간의 기술 교육이 시작되었습니다. \n이번엔 그 중 첫째 주, 사전 과제가 있었던 첫 주에 대한 소감을 읊어보고자 합니다.\n\n\n\n맥북\n\n\n베이스 캠프 첫날에 자리를 배치받았습니다 !! \n아직 완전한 제 자린 아니지만 사옥에 내 이름이 달린 자리가 하나 생겼다니 새삼 직장인이 되었고나 실감했습니다. 자리에 있는 전화기...",
  "content"  : "\n\n1월 4일 입사하고 벌써 2주가 훌쩍 지났습니다. \n지난 2주간은 입문 교육 후, 베이스 캠프라고 불리는 9 (+ 1) 주 간의 기술 교육이 시작되었습니다. \n이번엔 그 중 첫째 주, 사전 과제가 있었던 첫 주에 대한 소감을 읊어보고자 합니다.\n\n\n\n맥북\n\n\n베이스 캠프 첫날에 자리를 배치받았습니다 !! \n아직 완전한 제 자린 아니지만 사옥에 내 이름이 달린 자리가 하나 생겼다니 새삼 직장인이 되었고나 실감했습니다. 자리에 있는 전화기에 제 이름도 뜹디다. 히히\n의자도 찾아보니 170만원이 넘는 의자였습니다,, 어쩐지 앉자마자 편-안 해지더라니\n그리고 첫날의 하이라잍 맥북 프로를 받았습니다 희희\n그것도 20년 말일에 들어온 따끈따끈한 새 친구였습니다. \n하지만 설렘도 잠시, 한 평생을 윈도우와 함께 해온 저에게 맥북 키보드는 큰 어려움으로 다가왔습니다,,\n그치만 인간은 적응의 동물이라고 하져. 일주일만에 윈도우에서도 한영키 바꿀때 탭을 누르는 맥둥이가 되었씀니다 ^_^\n\n\n\n코드로 배우는 스프링 부트 웹 프로젝트\n\n\n사전 과제는 그리 어려운 과제는 아니었습니다. \n구멍가게 코딩단의 코드로 배우는 스프링 부트 웹프로젝트 책을 읽으면서 예제를 따라하는 과제였습니다. \n스프링 부트를 조금 만져본 적은 있지만 수박 겉핥기 식으로 본게 전부였고, JPA 는 초면이라서 술술 읽히진 않았슴니다.. 하지만 욕심 부리지 않고 찬찬히 따라해보기로 했습니당.\n\n\n\n취준할 때부터 서버 개발자를 목표로 잡고 있었기 때문에 스프링 부트부터 JPA까지 언젠가 공부해야겠단 생각을 하고 있었기 때문에 흥미를 갖고 공부할 수 있었습니다. 하지만 역시 어렵슴니다,, 무사히 사전 과제는 기한 내에 제출은 완료했지만 금요일에 쳤던 시험에서는 스스로 만족할만큼의 결과를 못 냈습니다.. 역시 읽기만 하는 것은 공부하는게 아님다,, 계속 꾸준히 공부해서 내걸로 만들도록 항상 노력해야겠습니다.\n\n\n\n취업하고 나서도 꾸준히 공부하겠다고 호언장담을 했었는데,,, 역시 간절하지 않으면 나태해지기 마련인가봅니다 ^^;;;; \n그래도 거진 1년동안 취준한다고 고생했으니,,, 쪼끔은 할 땐 하고 놀 땐 놀아야겠습니다. ^__^\n\n\n\n화이팅!!!\n"
} ,
  
  {
    "title"    : "첫글",
    "category" : "",
    "tags"     : " A Tag, Test, Lorem, Ipsum",
    "url"      : "/2021/01/19/%EC%B2%AB%EA%B8%80.html",
    "date"     : "January 19, 2021",
    "excerpt"  : "첫 글입니다.\n\n테스트 테스트\n\n\n\nstatic String str = &quot;첫 글이요&quot;;\n\n\n",
  "content"  : "첫 글입니다.\n\n테스트 테스트\n\n\n\nstatic String str = &quot;첫 글이요&quot;;\n\n\n"
} ,
  
  {
    "title"    : "Feature images",
    "category" : "",
    "tags"     : " Test, Lorem",
    "url"      : "/2014/11/29/feature-images.html",
    "date"     : "November 29, 2014",
    "excerpt"  : "Hopefully you will find enough information about how to set images in your blog here.\nThis is an example of a post which includes a feature image specified in the front matter of the post. \nThe feature image spans the full-width of the page, and i...",
  "content"  : "Hopefully you will find enough information about how to set images in your blog here.\nThis is an example of a post which includes a feature image specified in the front matter of the post. \nThe feature image spans the full-width of the page, and is shown with the title on permalink pages:\n\nfeature-img: &quot;assets/img/feature-img/desk-messy.jpeg&quot;\nthumbnail: &quot;assets/img/thumbnails/feature-img/desk-messy.jpeg&quot; \n\n\nYou can also use a thumbnail, a smaller version of the same image to improve loading of the page.\nThe thumbnail will also be used when you share your article on other platform (linkedin, whatsapp, facebook, …).\n\n\n  \n    And now it is working\n  \n\n\nYou can also add images aligned in your post using the aligner include.\nMake sure to separate all of the image path from in a string separated with ,.\nIt by default look into assets/img/ so give the path from there, example:\n\n{% include aligner.html images=&quot;pexels/book-glass.jpeg,triangle.png&quot; %}\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\nHere you have two images side by side, but you can set more and set the amount per columns \n(by specifying the number of columns or let it be automatic using &quot;auto&quot;):\n\n{% include aligner.html images=&quot;portfolio/cabin.png,portfolio/cake.png,portfolio/circus.png&quot; column=3 %}\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\nit also works with only one images, it is made to display it smaller than normally.\nHowever you can just use the Markdown way of doing it to get the image normal sized and centered.\n\n# Markdown way (bigger)\n![Travel]({{ &quot;/assets/img/pexels/computer.jpeg&quot; | relative_url}})\n# Aligner with only One (50% of width)\n{% include aligner.html images=&quot;pexels/computer.jpeg&quot; %}\n\n\n    \n    \n        \n    \n    \n\n\n"
} ,
  
  {
    "title"    : "Markdown and HTML",
    "category" : "",
    "tags"     : " Test, Markdown",
    "url"      : "/2014/11/28/markdown-and-html.html",
    "date"     : "November 28, 2014",
    "excerpt"  : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.\n\nTitle\n\nSub title\n\nTables have also bee...",
  "content"  : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.\n\nTitle\n\nSub title\n\nTables have also been extended from Markdown:\n\n\n  \n    \n      First Header\n      Second Header\n    \n  \n  \n    \n      Content Cell\n      Content Cell\n    \n    \n      Content Cell\n      Content Cell\n    \n  \n\n\nHere’s an example of an image, which is included using Markdown:\n\n\n\nThis is another example of list:\n\n\n  list of things\n    \n      Sub list\n      of Other things\n      with numbers\n    \n  \n  And many more\n    \n      Sub sub list\n        \n          can go on …\n            \n              and on …\n                \n                  and on !\n                \n              \n            \n          \n        \n      \n      That’s it.\n    \n  \n\n\nOther subtitle\n\nHighlighting for code in Jekyll is done using Base16 or Rouge. This theme makes use of Rouge by default.\n\n// count to ten\nfor (var i = 1; i &amp;lt;= 10; i++) {\n    console.log(i);\n}\n\n// count to twenty\nvar j = 0;\nwhile (j &amp;lt; 20) {\n    j++;\n    console.log(j);\n}\n\nMath\n\nType on Strap uses KaTeX to display maths. Equations such as \\(S_n = a \\times \\frac{1-r^n}{1-r}\\) can be displayed inline.\n\nAlternatively, they can be shown on a new line:\n\n\\[f(x) = \\int \\frac{2x^2+4x+6}{x-2}\\]\n\n"
} ,
  
  {
    "title"    : "Generate a table of content",
    "category" : "",
    "tags"     : " toc.js, kramdown, Markdown, Customization",
    "url"      : "/2013/12/12/Generate-a-table-of-content.html",
    "date"     : "December 12, 2013",
    "excerpt"  : "Using Kramdown GFM \n\n\n\n  Using Kramdown GFM     \n      Basic Usage\n    \n  \n  Using toc.js    \n      Customize with toc.js        \n          Use with this jekyll template\n        \n      \n      Basic Usage\n      How it would look like\n    \n  \n\n\nBasi...",
  "content"  : "Using Kramdown GFM \n\n\n\n  Using Kramdown GFM     \n      Basic Usage\n    \n  \n  Using toc.js    \n      Customize with toc.js        \n          Use with this jekyll template\n        \n      \n      Basic Usage\n      How it would look like\n    \n  \n\n\nBasic Usage\n\nYou need to put this at the beginning of the page where you want the table of content to be displayed\n\n* TOC\n{:toc}\n\n\nIt will then render the markdown and html titles (lines that begins with # or using the &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; tages)\n\nUsing toc.js\n\nDemo display of jekyll-table-of-contents by ghiculescu.\n\n\n\n\nCustomize with toc.js\n\ntoc.js stands for table of content, it is a js plugin that generates automatically a table of content of a post.\n\nUse with this jekyll template\n\nIf you want to customize the theme it is up to you, you can add the toc.js file into the asset &amp;gt; js and add it into the page.html layout with:\n\n&amp;lt;script src=&quot;/assets/js/toc.js&quot; &amp;gt;&amp;lt;/script&amp;gt;\n\nThen you can use it as it is said on the repository.\n\nBasic Usage\n\nThe script requires jQuery. First, reference toc.js in templates where you would like to add the table of content. Then, create an HTML element wherever you want your table of contents to appear:\n\n&amp;lt;div id=&quot;toc&quot;&amp;gt;&amp;lt;/div&amp;gt;\n\n\nThen you put your post with titles and all like:\n\n## Title\n## Mid title 1\nThis is text on page one\n## Mid title 2\nThis is text for page two\n### Sub title 2.a\nSome more text\n\n\nThen at the end of your post, you call the .toc() function using:\n\n&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;\n$(document).ready(function() {\n    $(&#39;#toc&#39;).toc();\n});\n&amp;lt;/script&amp;gt;\n\n\nHow it would look like\n\nSo you can get a feel of it.\n\n\n\n\n\n\n\n\n"
} 
  
  
  
]
